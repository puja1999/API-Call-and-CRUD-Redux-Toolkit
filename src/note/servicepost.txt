// Need to use the React-specific entry point to import createApi
  import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'

// Define a service using a base URL and expected endpoints
  export const pokemonApi = createApi({
    reducerPath: 'pokemonApi',
    baseQuery: fetchBaseQuery({ baseUrl: 'https://pokeapi.co/api/v2/' }),
    endpoints: (builder) => ({
      getPokemonByName: builder.query({
        query: (name) => `pokemon/${name}`,
      }),
    }),
})

// Export hooks for usage in functional components, which are
// auto-generated based on the defined endpoints
  export const { useGetPokemonByNameQuery } = pokemonApi

1) import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

 export const postApi = createApi({
    reducerPath: "postApi",
    baseQuery: fetchBaseQuery({
      baseUrl: "https://jsonplaceholder.typicode.com/",
  }),

  endpoints: (builder) => ({
    getAllPost: builder.query({
      query: () => ({
        url: "posts",
        method: "GET",
      }),
    }),
  }),
});
export const { useGetAllPostQuery } = postApi;

2) import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

export const postApi = createApi({
  reducerPath: "postApi",
  baseQuery: fetchBaseQuery({
    baseUrl: "https://jsonplaceholder.typicode.com/",
  }),
 endpoints: (builder) => ({
    getAllPost: builder.query({
      query: () => ({
        url: "posts",
        method: "GET",
      }),
    }),
    getPostById: builder.query({
      query: (id) => {
        console.log("ID:", id);
        return {
          url: `posts/${id}`,
          method: "GET",
        };
      },
    }),
  }),
});

export const { useGetAllPostQuery, useGetPostByIdQuery } = postApi;